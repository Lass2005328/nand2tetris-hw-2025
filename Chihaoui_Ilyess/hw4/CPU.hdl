CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=notOp);
    Mux16(a=aluOut,b=instruction,sel=notOp,out=entryMuxOut);

    Or(a=notOp,b=instruction[5],out=intoA);
    ARegister(in=entryMuxOut,load=intoA,out=A,out[0..14]=addressM);

    And(a=instruction[15],b=instruction[12],out=AMSwitch);
    Mux16(a=A,b=inM,sel=AMSwitch,out=AM);

    And(a=instruction[15],b=instruction[4],out=intoD);
    DRegister(in=aluOut,load=intoD,out=D);

    ALU(x=D,y=AM,out=aluOut,out=outM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],

        zr=zrOut,
        ng=ngOut
    );

    And(a=instruction[15],b=instruction[3],out=writeM);

    Not(in=ngOut,out=pos);
    Not(in=zrOut,out=nzr);
    And(a=instruction[15],b=instruction[0],out=jgt);
    And(a=pos,b=nzr,out=posnzr);
    And(a=jgt,b=posnzr,out=ld1);

    And(a=instruction[15],b=instruction[1],out=jeq);
    And(a=jeq,b=zrOut,out=ld2);

    And(a=instruction[15],b=instruction[2],out=jlt);
    And(a=jlt,b=ngOut,out=ld3);

    Or(a=ld1,b=ld2,out=ldt);
    Or(a=ld3, b=ldt, out=ld);

    PC(in=A,load=ld,inc=true,reset=reset,out[0..14]=pc);}